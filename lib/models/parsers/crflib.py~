#!/usr/bin/env python
# -*- coding: UTF-8 -*-
 
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import numpy.ctypeslib as npct
from ctypes import *

dll_file = r'/mnt/hgfs/linux_path/crflib/crflib'
libcd = npct.load_library(dll_file, ".")

libcd.decode.restype = None
libcd.decode.argtypes = [
    np.ctypeslib.ndpointer(dtype=np.float64, ndim=2),
    POINTER(c_longlong),
    POINTER(c_longlong),
    np.ctypeslib.ndpointer(dtype=np.float64, ndim=3),
    POINTER(c_longlong),
    POINTER(c_longlong),
    np.ctypeslib.ndpointer(dtype=np.int, ndim=2),
    POINTER(c_longlong),
    POINTER(c_longlong)
]

def decode(arc_array,rel_array,real_len ):
    sen_size = arc_array.shape[0]
    out_array = np.zeros((sen_size,2), dtype = np.int)
    libcd.decode(arc_array, arc_array.ctypes.strides, arc_array.ctypes.shape,
                      rel_array, rel_array.ctypes.strides, rel_array.ctypes.shape,
                      out_array, out_array.ctypes.strides, out_array.ctypes.shape, real_len)
    return out_array[:,0],out_array[:,1]




if False:
	import numpy as np

	libcd.init_buffer(1024)
	print("init_buffer ok")

	x1 = np.random.uniform(-10,0, size=(10,10))
	x2 = np.random.uniform(-10,0, size=(10,10,12))

	dr,rr = decode(x1,x2,8)

	print(dr)
	print(rr)

	print('ok')
